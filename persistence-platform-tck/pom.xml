<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>fish.payara.jakarta.tests.tck</groupId>
        <artifactId>tck</artifactId>
        <version>1.0-SNAPSHOT</version>
    </parent>

    <artifactId>persistence-platform-tck</artifactId>

    <properties>
        <includeGroups>platform</includeGroups>
        <ts.home>${project.basedir}${file.separator}jakartaeetck</ts.home>
    </properties>

    <!-- Something in this BOM causes Junit to find no tests - this should be addressed -->
    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>fish.payara.api</groupId>
                <artifactId>payara-bom</artifactId>
                <version>${payara.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <dependency>
            <groupId>jakarta.inject</groupId>
            <artifactId>jakarta.inject-api</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>jakarta.persistence</groupId>
            <artifactId>jakarta.persistence-api</artifactId>
        </dependency>

        <!-- The TCK itself -->
        <dependency>
            <groupId>jakarta.tck</groupId>
            <artifactId>persistence-platform-tck-common</artifactId>
            <version>${jakarta.tck.platform.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>jakarta.tck</groupId>
            <artifactId>persistence-platform-tck-spec-tests</artifactId>
            <version>${jakarta.tck.platform.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>jakarta.tck</groupId>
            <artifactId>persistence-platform-tck-tests</artifactId>
            <version>${jakarta.tck.platform.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>jakarta.tck</groupId>
            <artifactId>persistence-platform-tck-dbprocedures</artifactId>
            <version>${jakarta.tck.platform.version}</version>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>jakarta.persistence</groupId>
                    <artifactId>jakarta.persistence-api</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <!-- TCK tools dependencies (the TCK above depends on these) -->
        <dependency>
            <groupId>jakarta.tck</groupId>
            <artifactId>common</artifactId>
            <version>${jakarta.tck.common.version}</version>
            <!-- Jenkins seems to require us to require us to not use the version bundled with this (1.2) -->
            <exclusions>
                <exclusion>
                    <groupId>commons-codec</groupId>
                    <artifactId>commons-codec</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>commons-codec</groupId>
            <artifactId>commons-codec</artifactId>
            <version>${commons-codec.version}</version>
        </dependency>

        <!-- Junit -->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter</artifactId>
        </dependency>
        <dependency>
            <groupId>org.junit.vintage</groupId>
            <artifactId>junit-vintage-engine</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- Arquillian -->
        <dependency>
            <groupId>org.jboss.arquillian.container</groupId>
            <artifactId>arquillian-container-test-spi</artifactId>
        </dependency>
        <dependency>
            <groupId>org.jboss.arquillian.container</groupId>
            <artifactId>arquillian-container-spi</artifactId>
        </dependency>
        <dependency>
            <groupId>org.jboss.arquillian.core</groupId>
            <artifactId>arquillian-core-spi</artifactId>
        </dependency>
        <dependency>
            <groupId>org.jboss.arquillian.test</groupId>
            <artifactId>arquillian-test-impl-base</artifactId>
        </dependency>
        <dependency>
            <groupId>org.jboss.arquillian.junit5</groupId>
            <artifactId>arquillian-junit5-container</artifactId>
        </dependency>
        <dependency>
            <groupId>org.jboss.arquillian.junit</groupId>
            <artifactId>arquillian-junit-core</artifactId>
        </dependency>
        <dependency>
            <groupId>org.jboss.arquillian.junit5</groupId>
            <artifactId>arquillian-junit5-core</artifactId>
        </dependency>


        <dependency>
            <groupId>fish.payara.arquillian</groupId>
            <artifactId>payara-client-ee11</artifactId>
            <version>${payara.arquillian.version}</version>
            <scope>test</scope>
        </dependency>

        <!-- Arquillian extensions for TCK  -->
        <dependency>
            <groupId>jakarta.tck.arquillian</groupId>
            <artifactId>arquillian-protocol-javatest</artifactId>
            <version>${jakarta.tck.arquillian.version}</version>
        </dependency>
        <dependency>
            <groupId>jakarta.tck.arquillian</groupId>
            <artifactId>arquillian-protocol-common</artifactId>
            <version>${jakarta.tck.arquillian.version}</version>
        </dependency>
        <dependency>
            <groupId>jakarta.tck.arquillian</groupId>
            <artifactId>arquillian-protocol-lib</artifactId>
            <version>${jakarta.tck.arquillian.version}</version>
        </dependency>
        <dependency>
            <groupId>jakarta.tck.arquillian</groupId>
            <artifactId>tck-porting-lib</artifactId>
            <version>${jakarta.tck.arquillian.version}</version>
        </dependency>
    </dependencies>

    <build>
        <resources>
            <resource>
                <targetPath>${project.build.directory}/sql</targetPath>
                <filtering>true</filtering>
                <directory>${project.basedir}/sql/derby</directory>
                <includes>
                    <include>*.sql</include>
                </includes>
            </resource>
            <resource>
                <directory>src/main/resources</directory>
            </resource>
        </resources>

        <plugins>
            <plugin>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <id>copy-dbprocedures</id>
                        <goals>
                            <goal>copy</goal>
                        </goals>
                        <phase>generate-resources</phase>
                        <configuration>
                            <artifactItems>
                                <artifactItem>
                                    <groupId>jakarta.tck</groupId>
                                    <artifactId>persistence-platform-tck-dbprocedures</artifactId>
                                    <overWrite>true</overWrite>
                                    <destFileName>dbprocedures.jar</destFileName>
                                    <outputDirectory>${project.build.directory}</outputDirectory>
                                </artifactItem>
                            </artifactItems>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>com.googlecode.maven-download-plugin</groupId>
                <artifactId>download-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>download-derby</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>wget</goal>
                        </goals>
                        <configuration>
                            <skip>${skipConfig}</skip>
                            <url>${derby.zip.url}</url>
                            <unpack>true</unpack>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-antrun-plugin</artifactId>
                <executions>
                    <execution>
                        <id>copy-derby-to-payara</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <configuration>
                            <skip>${skipConfig}</skip>
                            <target>
                                <move todir="${payara.db.home}">
                                    <fileset dir="${db.download.location}" />
                                </move>
                                <copy file="${payara.db.home}${file.separator}lib${file.separator}derbytools.jar" todir="${payara.home}${file.separator}glassfish${file.separator}domains${file.separator}domain1${file.separator}lib"/>
                                <copy file="${payara.db.home}${file.separator}lib${file.separator}derbyclient.jar" todir="${payara.home}${file.separator}glassfish${file.separator}domains${file.separator}domain1${file.separator}lib"/>
                                <copy file="${payara.db.home}${file.separator}lib${file.separator}derbyshared.jar" todir="${payara.home}${file.separator}glassfish${file.separator}domains${file.separator}domain1${file.separator}lib"/>
                            </target>
                        </configuration>
                    </execution>

                    <execution>
                        <id>start-database</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <configuration>
                            <skip>${skipServerStartStop}</skip>
                            <target>
                                <exec executable="${payara.db.home}${file.separator}bin${file.separator}startNetworkServer${script.extension}" spawn="true" dir="${payara.db.home}"/>
                                <echo message="Waiting 3 seconds for database in forked process to start..."/>
                                <sleep seconds="3"/>
                            </target>
                        </configuration>
                    </execution>

                    <execution>
                        <id>execute-ddl</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <configuration>
                            <skip>${skipConfig}</skip>
                            <target>
                                <exec executable="${payara.db.home}${file.separator}bin${file.separator}ij${script.extension}" dir="${payara.db.home}">
                                    <arg value="${project.build.directory}${file.separator}sql${file.separator}derby.ddl.sql" />
                                </exec>
                            </target>
                        </configuration>
                    </execution>

                    <execution>
                        <id>stop-database</id>
                        <phase>post-integration-test</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <configuration>
                            <skip>${skipServerStartStop}</skip>
                            <target>
                                <exec executable="${payara.db.home}${file.separator}bin${file.separator}stopNetworkServer${script.extension}" dir="${payara.db.home}"/>
                            </target>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>start-payara-server-for-config</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <skip>${skipServerStartStop}</skip>
                            <executable>${payara.asadmin}</executable>
                            <arguments>
                                <argument>start-domain</argument>
                            </arguments>
                        </configuration>
                    </execution>
                    <execution>
                        <id>enable-http-trace</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <skip>${skipConfig}</skip>
                            <executable>${payara.asadmin}</executable>
                            <arguments>
                                <argument>set</argument>
                                <argument>server-config.network-config.protocols.protocol.http-listener-1.http.trace-enabled=true</argument>
                            </arguments>
                        </configuration>
                    </execution>
                    <execution>
                        <id>Add-j2ee-user</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <skip>${skipConfig}</skip>
                            <executable>${payara.asadmin}</executable>
                            <arguments>
                                <argument>--passwordfile</argument>
                                <argument>${project.basedir}${file.separator}j2ee.pass</argument>
                                <argument>create-file-user</argument>
                                <argument>--groups</argument>
                                <argument>staff:mgr</argument>
                                <argument>j2ee</argument>
                            </arguments>
                        </configuration>
                    </execution>
                    <execution>
                        <id>Add-javajoe-user</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <skip>${skipConfig}</skip>
                            <executable>${payara.asadmin}</executable>
                            <arguments>
                                <argument>--passwordfile</argument>
                                <argument>${project.basedir}${file.separator}javajoe.pass</argument>
                                <argument>create-file-user</argument>
                                <argument>--groups</argument>
                                <argument>guest</argument>
                                <argument>javajoe</argument>
                            </arguments>
                        </configuration>
                    </execution>
                    <execution>
                        <id>create-derby-pool-no-tx</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <skip>${skipConfig}</skip>
                            <executable>${payara.asadmin}</executable>
                            <arguments>
                                <argument>create-jdbc-connection-pool</argument>
                                <argument>--restype</argument>
                                <argument>javax.sql.DataSource</argument>
                                <argument>--datasourceclassname</argument>
                                <argument>org.apache.derby.jdbc.ClientDataSource</argument>
                                <argument>--property</argument>
                                <argument>databaseName=derbyDB:serverName=localhost:portNumber=1527:user=cts1:password=cts1</argument>
                                <argument>--steadypoolsize</argument>
                                <argument>32</argument>
                                <argument>--maxpoolsize</argument>
                                <argument>64</argument>
                                <argument>cts-derby-pool_no_tx</argument>
                            </arguments>
                        </configuration>
                    </execution>
                    <execution>
                        <id>create-derby-pool</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <skip>${skipConfig}</skip>
                            <executable>${payara.asadmin}</executable>
                            <arguments>
                                <argument>create-jdbc-connection-pool</argument>
                                <argument>--restype</argument>
                                <argument>javax.sql.DataSource</argument>
                                <argument>--datasourceclassname</argument>
                                <argument>org.apache.derby.jdbc.ClientDataSource</argument>
                                <argument>--property</argument>
                                <argument>databaseName=derbyDB:serverName=localhost:portNumber=1527:user=cts1:password=cts1</argument>
                                <argument>--steadypoolsize</argument>
                                <argument>32</argument>
                                <argument>--maxpoolsize</argument>
                                <argument>64</argument>
                                <argument>cts-derby-pool</argument>
                            </arguments>
                        </configuration>
                    </execution>
                    <execution>
                        <id>create-derby-no-tx-resource</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <skip>${skipConfig}</skip>
                            <executable>${payara.asadmin}</executable>
                            <arguments>
                                <argument>create-jdbc-resource</argument>
                                <argument>--connectionpoolid</argument>
                                <argument>cts-derby-pool_no_tx</argument>
                                <argument>jdbc/DB_no_tx</argument>
                            </arguments>
                        </configuration>
                    </execution>
                    <execution>
                        <id>create-derby-resource</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <skip>${skipConfig}</skip>
                            <executable>${payara.asadmin}</executable>
                            <arguments>
                                <argument>create-jdbc-resource</argument>
                                <argument>--connectionpoolid</argument>
                                <argument>cts-derby-pool</argument>
                                <argument>jdbc/DB1</argument>
                            </arguments>
                        </configuration>
                    </execution>
                    <execution>
                        <id>set-Xmx-jvm-option</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <skip>${skipConfig}</skip>
                            <executable>${payara.asadmin}</executable>
                            <arguments>
                                <argument>create-jvm-option</argument>
                                <argument>-Xmx4096m</argument>
                            </arguments>
                        </configuration>
                    </execution>
                    <execution>
                        <id>stop-payara-server-after-config</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <skip>${skipServerStartStop}</skip>
                            <executable>${payara.asadmin}</executable>
                            <arguments>
                                <argument>stop-domain</argument>
                            </arguments>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <artifactId>maven-failsafe-plugin</artifactId>
                <executions>
                    <execution>
                        <id>jpa-tests-javatest</id>
                        <goals>
                            <goal>integration-test</goal>
                            <goal>verify</goal>
                        </goals>
                        <configuration>
                            <dependenciesToScan>jakarta.tck:persistence-platform-tck-tests</dependenciesToScan>
                            <includes>
                                <include>**/*Test.java</include>
                            </includes>
                            <groups>${includeGroups}</groups>
                            <trimStackTrace>false</trimStackTrace>
                            <systemPropertyVariables>
                                <payara.home>${payara.home}</payara.home>
                                <junit.log.traceflag>true</junit.log.traceflag>
                                <harness.log.traceflag>true</harness.log.traceflag>
                                <cts.harness.debug>true</cts.harness.debug>
                                <project.basedir>${project.basedir}</project.basedir>
                                <ts.home>${ts.home}</ts.home>
                                <ts.work.dir>${project.build.directory}</ts.work.dir>
                                <log.file.location>${project.build.directory}</log.file.location>
                                <arquillian.xml>arquillian.xml</arquillian.xml>
                            </systemPropertyVariables>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <artifactId>maven-surefire-report-plugin</artifactId>
                <configuration>
                    <linkXRef>false</linkXRef>
                </configuration>
                <executions>
                    <execution>
                        <id>generate-failsafe-html-report</id>
                        <goals>
                            <goal>failsafe-report-only</goal>
                        </goals>
                        <phase>post-integration-test</phase>
                        <configuration>
                            <outputDirectory>${project.build.directory}/test-reports</outputDirectory>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <profile>
            <id>web</id>
            <properties>
                <includeGroups>web</includeGroups>
            </properties>
        </profile>

        <profile>
            <id>platform</id>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>

            <!-- We don't need these dependencies if testing web profile -->
            <dependencies>
                <dependency>
                    <groupId>jakarta.tck.arquillian</groupId>
                    <artifactId>arquillian-protocol-appclient</artifactId>
                    <version>${jakarta.tck.arquillian.version}</version>
                </dependency>
            </dependencies>
        </profile>
    </profiles>

</project>