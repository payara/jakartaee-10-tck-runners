<?xml version="1.0" encoding="UTF-8"?>
<!--

    Copyright (c) 2021, 2024 Contributors to the Eclipse Foundation. All rights reserved.

    This program and the accompanying materials are made available under the
    terms of the Eclipse Public License v. 2.0, which is available at
    http://www.eclipse.org/legal/epl-2.0.

    This Source Code may also be made available under the following Secondary
    Licenses when the conditions for such availability set forth in the
    Eclipse Public License v. 2.0 are satisfied: GNU General Public License,
    version 2 with the GNU Classpath Exception, which is available at
    https://www.gnu.org/software/classpath/license.html.

    SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0

-->

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>fish.payara.jakarta.tests.tck</groupId>
        <artifactId>tck</artifactId>
        <version>1.0-SNAPSHOT</version>
    </parent>

    <artifactId>servlet-tck-runner</artifactId>
    <packaging>jar</packaging>

    <name>TCK: Servlet</name>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>fish.payara.api</groupId>
                <artifactId>payara-bom</artifactId>
                <version>${payara.version}</version>
                <scope>import</scope>
                <type>pom</type>
            </dependency>
        </dependencies>
    </dependencyManagement>

    <dependencies>
        <dependency>
            <groupId>jakarta.tck</groupId>
            <artifactId>servlet-tck-runtime</artifactId>
            <version>${jakarta.tck.servlet.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>jakarta.tck</groupId>
            <artifactId>servlet-tck-util</artifactId>
            <version>${jakarta.tck.servlet.version}</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>org.jboss.arquillian.junit5</groupId>
            <artifactId>arquillian-junit5-container</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- Dependencies for our archive enhancer (org.glassfish.servlet.tck.WebArchiveUpdater) to compile -->
        <dependency>
            <groupId>org.jboss.arquillian.container</groupId>
            <artifactId>arquillian-container-test-spi</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.jboss.arquillian.container</groupId>
            <artifactId>arquillian-container-test-impl-base</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.jboss.shrinkwrap.resolver</groupId>
            <artifactId>shrinkwrap-resolver-impl-maven-archive</artifactId>
            <scope>test</scope>
        </dependency>
        <!-- Explicitly use 1.7.36 to avoid non-failing error on client-side. SLF4J is also required by a specific test -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-simple</artifactId>
            <version>2.0.16</version>
            <scope>test</scope>
        </dependency>

        <!-- Dependency for the API signature test -->
        <dependency>
            <groupId>jakarta.tck</groupId>
            <artifactId>sigtest-maven-plugin</artifactId>
            <!-- Override version inherited from parent - doesn't seem to pass using 2.3 -->
            <version>2.2</version>
            <scope>test</scope>
        </dependency>

        <!-- Bizarrely the TCK requires its own API as a dependency to run -->
        <dependency>
            <groupId>jakarta.servlet</groupId>
            <artifactId>jakarta.servlet-api</artifactId>
            <scope>test</scope>
        </dependency>
        <!-- Bizarrely the TCK requires JUnit 4 as a dependency to avoid ClassDefNotFound errors -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.13.2</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <!-- We don't need to cache this -->
            <plugin>
                <artifactId>maven-install-plugin</artifactId>
                <executions>
                    <execution>
                        <id>default-install</id>
                        <phase>disabled</phase>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <id>unpack-tck-certs</id>
                        <phase>generate-test-resources</phase>
                        <goals>
                            <goal>unpack</goal>
                        </goals>
                        <configuration>
                            <artifactItems>
                                <artifactItem>
                                    <groupId>jakarta.tck</groupId>
                                    <artifactId>servlet-tck-runtime</artifactId>
                                    <type>jar</type>
                                    <overWrite>true</overWrite>
                                    <outputDirectory>${project.build.testOutputDirectory}</outputDirectory>
                                    <includes>certificates${file.separator}cts_cert,certificates${file.separator}clientcert.jks,certificates${file.separator}clientcert.p12</includes>
                                </artifactItem>
                            </artifactItems>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>keytool-maven-plugin</artifactId>
                <version>1.7</version>
                <executions>
                    <execution>
                        <id>convert-jks-to-pkcs12</id>
                        <phase>process-test-resources</phase>
                        <goals>
                            <goal>importKeystore</goal>
                        </goals>
                        <configuration>
                            <srckeystore>${project.build.testOutputDirectory}/certificates/clientcert.jks</srckeystore>
                            <destkeystore>${project.build.testOutputDirectory}/certificates/clientcert.p12</destkeystore>
                            <srcstoretype>JKS</srcstoretype>
                            <deststoretype>PKCS12</deststoretype>
                            <srcstorepass>changeit</srcstorepass>
                            <deststorepass>changeit</deststorepass>
                        </configuration>
                    </execution>
                    <execution>
                        <id>add-to-payara</id>
                        <phase>process-test-resources</phase>
                        <goals>
                            <goal>importCertificate</goal>
                        </goals>
                        <configuration>
                            <file>${project.build.testOutputDirectory}${file.separator}certificates${file.separator}cts_cert</file>
                            <alias>cts</alias>
                            <keystore>${payara.home}${file.separator}glassfish${file.separator}domains${file.separator}domain1${file.separator}config${file.separator}cacerts.p12</keystore>
                            <storepass>changeit</storepass>
                            <keypass>changeit</keypass>
                            <noprompt>true</noprompt>
                            <trustcacerts>true</trustcacerts>
                            <verbose>true</verbose>
                            <skip>${skipConfig}</skip>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>start-payara-server-for-config</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <skip>${skipServerStartStop}</skip>
                            <executable>${payara.asadmin}</executable>
                            <arguments>
                                <argument>start-domain</argument>
                            </arguments>
                        </configuration>
                    </execution>
                    <execution>
                        <id>enable-http2-push</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <skip>${skipConfig}</skip>
                            <executable>${payara.asadmin}</executable>
                            <arguments>
                                <argument>set</argument>
                                <argument>configs.config.server-config.network-config.protocols.protocol.http-listener-1.http.http2-push-enabled=true</argument>
                            </arguments>
                        </configuration>
                    </execution>
                    <execution>
                        <id>create-javajoe-user</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <skip>${skipConfig}</skip>
                            <executable>${payara.asadmin}</executable>
                            <arguments>
                                <argument>create-file-user</argument>
                                <argument>--groups=Manager:Employee</argument>
                                <argument>--passwordfile=${project.basedir}${file.separator}src${file.separator}test${file.separator}javajoe.pass</argument>
                                <argument>javajoe</argument>
                            </arguments>
                        </configuration>
                    </execution>
                    <execution>
                        <id>create-j2ee-user</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <skip>${skipConfig}</skip>
                            <executable>${payara.asadmin}</executable>
                            <arguments>
                                <argument>create-file-user</argument>
                                <argument>--groups=Administrator:Employee</argument>
                                <argument>--passwordfile=${project.basedir}${file.separator}src${file.separator}test${file.separator}j2ee.pass</argument>
                                <argument>j2ee</argument>
                            </arguments>
                        </configuration>
                    </execution>
                    <execution>
                        <id>stop-payara-server-after-config</id>
                        <phase>pre-integration-test</phase>
                        <goals>
                            <goal>exec</goal>
                        </goals>
                        <configuration>
                            <skip>${skipServerStartStop}</skip>
                            <executable>${payara.asadmin}</executable>
                            <arguments>
                                <argument>stop-domain</argument>
                            </arguments>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-failsafe-plugin</artifactId>
                <executions>
                    <execution>
                        <id>run-servlet-tck</id>
                        <goals>
                            <goal>integration-test</goal>
                        </goals>
                        <configuration>
                            <dependenciesToScan>jakarta.tck:servlet-tck-runtime</dependenciesToScan>
                            <includes>
                                <include>*</include>
                            </includes>
                            <systemPropertyVariables>
                                <payara.home>${payara.home}</payara.home>
                                <arquillian.xml>${project.basedir}${file.separator}src${file.separator}test${file.separator}arquillian.xml</arquillian.xml>
                                <!-- if the servlet container doesn't support optional cross context -->
                                <servlet.tck.support.crossContext>true</servlet.tck.support.crossContext>
                                <!-- if the servlet container doesn't support optional http2 push -->
                                <servlet.tck.support.http2Push>true</servlet.tck.support.http2Push>

                                <javax.net.ssl.keyStore>${project.build.testOutputDirectory}${file.separator}certificates${file.separator}clientcert.p12</javax.net.ssl.keyStore>
                                <javax.net.ssl.keyStoreType>pkcs12</javax.net.ssl.keyStoreType>
                                <javax.net.ssl.keyStorePassword>changeit</javax.net.ssl.keyStorePassword>
                                <javax.net.ssl.trustStore>${payara.home}${file.separator}glassfish${file.separator}domains${file.separator}domain1${file.separator}config${file.separator}cacerts.p12</javax.net.ssl.trustStore>
                                <javax.net.ssl.trustStoreType>pkcs12</javax.net.ssl.trustStoreType>
                                <javax.net.ssl.trustStorePassword>changeit</javax.net.ssl.trustStorePassword>
                                <jdk.tls.client.protocols>TLSv1.2</jdk.tls.client.protocols>
                                <!-- Print the content of the deployed archives -->
                                <servlet.tck.archive.print>true</servlet.tck.archive.print>

                                <!-- Set the properties for the API signature test -->
                                <jimage.dir>${project.build.directory}${file.separator}jdk-bundle</jimage.dir>
                                <sigTestClasspath>${payara.home}${file.separator}glassfish${file.separator}modules${file.separator}jakarta.servlet-api.jar${path.separator}${project.build.directory}${file.separator}jdk-bundle${file.separator}java.base${path.separator}${project.build.directory}${file.separator}jdk-bundle${file.separator}java.rmi${path.separator}${project.build.directory}${file.separator}jdk-bundle${file.separator}java.sql${path.separator}${project.build.directory}${file.separator}jdk-bundle${file.separator}java.naming</sigTestClasspath>
                            </systemPropertyVariables>
                        </configuration>
                    </execution>
                    <execution>
                        <id>verify</id>
                        <phase>verify</phase>
                        <goals>
                            <goal>verify</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
</project>
